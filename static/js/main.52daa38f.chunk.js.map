{"version":3,"sources":["routes/Zune/Zune.tsx","routes/Zune/components/Home/index.ts","routes/Zune/components/Home/Home.tsx","routes/Zune/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["player","Home","_this","this","react_default","a","createElement","style","marginTop","lineHeight","className","props","options","map","el","key","id","fontSize","length","textOverflow","selected","label","Component","Zune","state","token","deviceId","menu","library","setupPlayer","window","onSpotifyWebPlaybackSDKReady","Spotify","Player","name","getOAuthToken","cb","addListener","_ref","message","console","error","_ref2","_ref3","_ref4","log","_ref5","device_id","setState","initPlay","_ref6","connect","authUrl","redirect_uri","location","origin","scopes","encodeURIComponent","_callee2","response","currentlyPlaying","albumResponse","regenerator_default","wrap","_context2","prev","next","fetch","method","headers","Content-Type","Authorization","concat","sent","status","json","items","getAlbumTracks","track","album","body","JSON","stringify","uris","uri","setTimeout","Object","asyncToGenerator","mark","_callee","currState","_context","getCurrentState","paused","togglePlayer","stop","nextTrack","prevTrack","previousTrack","pausePlayback","pause","togglePlay","_callee3","album_id","albumTrack","_context3","Headers","abrupt","getLibrary","_callee4","songs","_context4","getPlaylists","_callee5","_context5","getPlaylistIcon","_callee6","playlist_id","_context6","hash","split","i","objectSpread","index","_this2","_this$state","loginScreen","width","height","display","flexDirection","justifyContent","alignItems","src","es_button","backgroundColor","type","href","marginRight","seletedOptions","components_Home","marginBottom","onClick","Math","max","min","App","BrowserRouter","Route","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.52daa38f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { Button } from 'antd';\n\nimport {Home} from './components';\nimport 'antd/dist/antd.css';\nimport './Zune.css'\nimport Column from 'antd/lib/table/Column';\n\nlet player:Spotify.SpotifyPlayer;\n\ntype State = {\n    token: string | null;\n    deviceId: string | null;\n    selected: number;\n    library: any[];\n    menu: number | null;\n}\n\nclass Zune extends Component<{location: any}, State> {\n    state = {\n        token: null,\n        deviceId: null,\n        selected: 1,\n        menu: null,\n        library: [],\n    }\n    async componentWillMount() {\n        //Check for code in url\n        await this.setState({token: this.props.location.hash ? this.props.location.hash.split('=')[1]:null})\n        console.log(this.props.location)\n        if(this.props.location.hash.split('=')[1]){\n            await this.setupPlayer(this.props.location.hash.split('=')[1]);\n            const library = await this.getLibrary()\n            this.setState({library: library.map((el:any, i:number) => {\n                return {...el, index: i, label: el.track.name}\n            })})\n        }\n    }\n\n    render() {\n        const {menu, selected} = this.state;\n        const loginScreen = (\n            <div style={{width: '100%', height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'}}>\n                <img height='200' src='./zune.svg' />\n                <Button style={{marginTop: '1rem', backgroundColor: '#1ed760'}} type='primary' href={this.authUrl()} ><i style={{marginRight: '1rem'}} className=\"fab fa-spotify\"></i>Login</Button>\n            </div>\n        ) \n\n        const options = [\n            {\n                label: 'music',\n                id: 1,\n                options: this.state.library\n            },\n            {\n                label: 'playlists',\n                id: 2\n            }\n        ]\n\n        const seletedOptions = () => {\n            if (menu === 1){\n                return options[0].options\n            }\n            return options\n        }\n        return (\n            <div className='background'>\n                <div className=\"Zune\">\n                    <div className='border'>\n                        <div className='screen'>\n                            {!this.state.token && loginScreen}\n                            {this.state.token && <Home options={seletedOptions()!} selected={this.state.selected}/>}\n\n                        </div>\n                    </div>\n                    <div style={{marginBottom: '1rem'}} className='controls'>\n                        <button type='button' onClick={()=>{this.setState({menu: null, selected: 1})}} className='control back'><i className=\"fas fa-arrow-left\"></i></button>\n                        <div style={{flexDirection: 'column'}} className='control wheel'>\n                            <button type='button' onClick={()=>{this.setState({selected: Math.max(this.state.selected-1, 1)})}} className='directonal'>.</button>\n                            <div style={{width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'space-evenly'}}>\n                                <button type='button' onClick={()=>{this.prevTrack(player)}} className='directonal'>.</button>\n                                <button style={{}} type='button' onClick={()=>{this.setState({menu: selected});console.log(`Selected option ${selected} with value ${options[selected-1].label}, ${options[selected-1].options}`)}} className='directonal'>.</button>\n                                <button type='button' onClick={()=>{this.nextTrack(player)}} className='directonal'>.</button>\n                            </div>\n                            <button type='button' onClick={()=>{this.setState({selected: Math.min(this.state.selected+1, seletedOptions()!.length)})}} className='directonal'>.</button>\n                        </div>\n                        <button type='button' onClick={()=>{this.togglePlayer(player)}} className='control toggle'><i className=\"fas fa-play\"></i></button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private setupPlayer = (token:string):Spotify.SpotifyPlayer => { \n      window.onSpotifyWebPlaybackSDKReady = () => {\n              player = new Spotify.Player({\n              name: 'Get in the Zune',\n              getOAuthToken: cb => { cb(token); }\n          });\n  \n          // Error handling\n          player.addListener('initialization_error', ({ message }) => { console.error(message); });\n          player.addListener('authentication_error', ({ message }) => { console.error(message); });\n          player.addListener('account_error', ({ message }) => { console.error(message); });\n          player.addListener('playback_error', ({ message }) => { console.error(message); });\n  \n          // Playback status updates\n          player.addListener('player_state_changed', state => { console.log(state); });\n  \n          // Ready\n          player.addListener('ready', ({ device_id }) => {\n            this.setState({deviceId: device_id})\n            console.log('Ready with Device ID', device_id);\n            this.initPlay()\n          });\n  \n          // Not Ready\n          player.addListener('not_ready', ({ device_id }) => {\n          console.log('Device ID has gone offline', device_id);\n          });\n  \n          // Connect to the player!\n          player.connect(); \n      };\n      return player;\n    }\n\n    private authUrl = () => {\n        //Logic that builds the url and returns it\n      const my_client_id = 'fae22fc460a642acab61b10f6cc1cb77';\n      const redirect_uri = location.origin;\n      var scopes = 'streaming user-read-birthdate user-read-email user-read-private user-read-currently-playing user-read-playback-state user-read-recently-played user-modify-playback-state playlist-read-private user-library-read';\n      const url = 'https://accounts.spotify.com/authorize' +\n      '?response_type=token' +\n      '&client_id=' + my_client_id +\n      (scopes ? '&scope=' + encodeURIComponent(scopes) : '') +\n      '&redirect_uri=' + encodeURIComponent(redirect_uri);\n      return url\n    }\n\n    public initPlay = async () => {\n        const response = await fetch(`https://api.spotify.com/v1/me/player/recently-played`, {\n            method: 'GET',\n            headers: {\n               'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.state.token}`\n            },\n        })\n        if(response.status === 200){\n            const currentlyPlaying = await response.json();\n            console.log(currentlyPlaying.items[0])\n            const albumResponse = await this.getAlbumTracks(currentlyPlaying.items[0].track.album.id);\n            await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${this.state.deviceId}`, {\n                method: 'PUT',\n                body: JSON.stringify({ uris: albumResponse.map((el:any) => el.uri) }),\n                headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${this.state.token!}`\n                },\n            })\n            await setTimeout( async () => { const currState = await player.getCurrentState()\n              if (currState)\n                !currState.paused ? this.togglePlayer(player) : null;\n            },525);\n        } else {\n            console.log('aslkdlaksjdfhlkajshdflkajshdfl')\n        }\n    }\n\n    private nextTrack = (player: Spotify.SpotifyPlayer) => { \n        player.nextTrack();\n        console.log('Skipped to next track!');\n    }\n      \n    private prevTrack = (player: Spotify.SpotifyPlayer) => { \n        player.previousTrack();\n        console.log('Set to previous track!');\n    }\n\n    private pausePlayback = (player: Spotify.SpotifyPlayer) => { \n      player.pause();\n      console.log('Pausing track');\n    }\n      \n    private togglePlayer = (player: Spotify.SpotifyPlayer) => {\n        player.togglePlay();\n        // const state = await player.getCurrentState(); //force this request to complete\n        // console.log(state ? state.paused : null);\n    } \n\n    private getAlbumTracks = async (album_id: String) => {\n      const response = await fetch(`https://api.spotify.com/v1/albums/${album_id}/tracks`, { \n        method: 'GET', \n        headers: new Headers({\n          'Authorization': `Bearer ${this.state.token!}`\n        })\n      });\n      const albumTrack = await response.json();\n      console.log(\"TRACKS\")\n      console.log(albumTrack.items)\n      return albumTrack.items;\n    }\n\n    private getLibrary = async () => {\n        const response = await fetch('https://api.spotify.com/v1/me/tracks?offset=0&limit=50', { \n            method: 'GET', \n            headers: new Headers({\n                'Authorization': `Bearer ${this.state.token!}`\n            })\n        });\n        const songs = await response.json()\n        console.log(songs.items)\n        return songs.items;\n    }\n\n    private getPlaylists = async () => {\n      const response = await fetch('https://api.spotify.com/v1/me/playlists', { \n        method: 'GET', \n        headers: new Headers({\n          'Authorization': `Bearer ${this.state.token!}`\n        })\n      });\n      return await response;\n    }\n\n    private getPlaylistIcon = async (playlist_id: string) => {\n      const response = await fetch(`https://api.spotify.com/v1/me/playlists${playlist_id}/images`, { \n        method: 'GET', \n        headers: new Headers({\n          'Authorization': `Bearer ${this.state.token!}`\n        })\n      });\n      return await response;\n    }\n    // private loginButton = () => {\n    //   const my_client_id = 'fae22fc460a642acab61b10f6cc1cb77';\n    //   const redirect_uri = 'http://localhost:3000/';\n    //   var scopes = 'streaming user-read-birthdate user-read-email user-read-private';\n    //   const url = 'https://accounts.spotify.com/authorize' +\n    //   '?response_type=token' +\n    //   '&client_id=' + my_client_id +\n    //   (scopes ? '&scope=' + encodeURIComponent(scopes) : '') +\n    //   '&redirect_uri=' + encodeURIComponent(redirect_uri);\n    //   console.log('asd')\n    //   return (\n    //     <a type='button' href={url}>\n    //       LOGIN\n    //     </a>\n    //   )\n    // }\n}\n\nexport default Zune;\n","import Home from './Home';\n\nexport default Home;\n","import React, { Component } from 'react';\n\ntype Props = {\n    selected: number,\n    options: any[]\n}\n\nclass Home extends Component<Props> {\n    render() {\n        return (\n            <div style={{marginTop: '1rem', lineHeight: \"0.5rem\"}} className='menu'>\n                {this.props.options.map(el => {\n                    return (\n                        <p key={el.id} style={{fontSize: (this.props.options.length > 5) ? '1rem' : '2rem', textOverflow: 'hidden'}}>{el.id == this.props.selected ? <b>{el.label}</b>: el.label}</p>\n                    )\n                })}\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import Zune from './Zune';\n\nexport default Zune;\n","import React, { Component } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n} from \"react-router-dom\"; \n\nimport {Zune} from './routes'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route exact path='/' component={Zune} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}